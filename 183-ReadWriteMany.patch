From 3860932641543e672d0f79aeaac037268bdec841 Mon Sep 17 00:00:00 2001
From: Dmitry Chirikov <dmitry@chirikov.nl>
Date: Mon, 1 Mar 2021 12:49:58 +0100
Subject: [PATCH 1/2] Enable shared filesystem support

---
 provisioner.go | 156 ++++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 121 insertions(+), 35 deletions(-)

diff --git a/provisioner.go b/provisioner.go
index 84f8f80..9f02bf9 100644
--- a/provisioner.go
+++ b/provisioner.go
@@ -62,7 +62,8 @@ type NodePathMapData struct {
 }
 
 type ConfigData struct {
-	NodePathMap []*NodePathMapData `json:"nodePathMap,omitempty"`
+	NodePathMap          []*NodePathMapData `json:"nodePathMap,omitempty"`
+	SharedFileSystemPath string             `json:"sharedFileSystemPath,omitempty"`
 }
 
 type NodePathMap struct {
@@ -70,7 +71,8 @@ type NodePathMap struct {
 }
 
 type Config struct {
-	NodePathMap map[string]*NodePathMap
+	NodePathMap          map[string]*NodePathMap
+	SharedFileSystemPath string
 }
 
 func NewProvisioner(stopCh chan struct{}, kubeClient *clientset.Clientset,
@@ -158,6 +160,15 @@ func (p *LocalPathProvisioner) getRandomPathOnNode(node string) (string, error)
 	}
 
 	c := p.config
+	sharedFS, err := p.isSharedFilesystem()
+	if err != nil {
+		return "", err
+	}
+	if sharedFS {
+		// we are ignoring 'node' and returning shared FS path
+		return c.SharedFileSystemPath, nil
+	}
+	// we are working with local FS
 	npMap := c.NodePathMap[node]
 	if npMap == nil {
 		npMap = c.NodePathMap[NodeDefaultNonListedNodes]
@@ -177,22 +188,57 @@ func (p *LocalPathProvisioner) getRandomPathOnNode(node string) (string, error)
 	return path, nil
 }
 
+func (p *LocalPathProvisioner) isSharedFilesystem() (bool, error) {
+	p.configMutex.RLock()
+	defer p.configMutex.RUnlock()
+
+	if p.config == nil {
+		return false, fmt.Errorf("no valid config available")
+	}
+
+	c := p.config
+	if (c.SharedFileSystemPath != "") && (len(c.NodePathMap) != 0) {
+		return false, fmt.Errorf("both nodePathMap and sharedFileSystemPath are defined. Please make sure only one is in use")
+	}
+
+	if len(c.NodePathMap) != 0 {
+		return false, nil
+	}
+
+	if c.SharedFileSystemPath != "" {
+		return true, nil
+	}
+
+	return false, fmt.Errorf("both nodePathMap and sharedFileSystemPath are unconfigured")
+}
+
 func (p *LocalPathProvisioner) Provision(opts pvController.ProvisionOptions) (*v1.PersistentVolume, error) {
 	pvc := opts.PVC
-	if pvc.Spec.Selector != nil {
-		return nil, fmt.Errorf("claim.Spec.Selector is not supported")
+	node := opts.SelectedNode
+	sharedFS, err := p.isSharedFilesystem()
+	if err != nil {
+		return nil, err
 	}
-	for _, accessMode := range pvc.Spec.AccessModes {
-		if accessMode != v1.ReadWriteOnce {
-			return nil, fmt.Errorf("Only support ReadWriteOnce access mode")
+	if !sharedFS {
+		if pvc.Spec.Selector != nil {
+			return nil, fmt.Errorf("claim.Spec.Selector is not supported")
+		}
+		for _, accessMode := range pvc.Spec.AccessModes {
+			if accessMode != v1.ReadWriteOnce {
+				return nil, fmt.Errorf("Only support ReadWriteOnce access mode")
+			}
+		}
+		if node == nil {
+			return nil, fmt.Errorf("configuration error, no node was specified")
 		}
-	}
-	node := opts.SelectedNode
-	if opts.SelectedNode == nil {
-		return nil, fmt.Errorf("configuration error, no node was specified")
 	}
 
-	basePath, err := p.getRandomPathOnNode(node.Name)
+	nodeName := ""
+	if node != nil {
+		// This clause works only with sharedFS
+		nodeName = node.Name
+	}
+	basePath, err := p.getRandomPathOnNode(nodeName)
 	if err != nil {
 		return nil, err
 	}
@@ -201,7 +247,11 @@ func (p *LocalPathProvisioner) Provision(opts pvController.ProvisionOptions) (*v
 	folderName := strings.Join([]string{name, opts.PVC.Namespace, opts.PVC.Name}, "_")
 
 	path := filepath.Join(basePath, folderName)
-	logrus.Infof("Creating volume %v at %v:%v", name, node.Name, path)
+	if nodeName == "" {
+		logrus.Infof("Creating volume %v at %v", name, path)
+	} else {
+		logrus.Infof("Creating volume %v at %v:%v", name, nodeName, path)
+	}
 
 	storage := pvc.Spec.Resources.Requests[v1.ResourceName(v1.ResourceStorage)]
 	volMode := string(*pvc.Spec.VolumeMode)
@@ -210,12 +260,37 @@ func (p *LocalPathProvisioner) Provision(opts pvController.ProvisionOptions) (*v
 		"/bin/sh",
 		"/script/setup",
 	}
-	if err := p.createHelperPod(ActionTypeCreate, createCmdsForPath, name, path, node.Name, volMode, storage.Value()); err != nil {
+	if err := p.createHelperPod(ActionTypeCreate, createCmdsForPath, name, path, nodeName, volMode, storage.Value()); err != nil {
 		return nil, err
 	}
 
 	fs := v1.PersistentVolumeFilesystem
 	hostPathType := v1.HostPathDirectoryOrCreate
+
+	var nodeAffinity *v1.VolumeNodeAffinity
+	if sharedFS {
+		// If the same filesystem is mounted across all nodes, we don't need
+		// affinity, as path is accessible from any node
+		nodeAffinity = nil
+	} else {
+		nodeAffinity = &v1.VolumeNodeAffinity{
+			Required: &v1.NodeSelector{
+				NodeSelectorTerms: []v1.NodeSelectorTerm{
+					{
+						MatchExpressions: []v1.NodeSelectorRequirement{
+							{
+								Key:      KeyNode,
+								Operator: v1.NodeSelectorOpIn,
+								Values: []string{
+									node.Name,
+								},
+							},
+						},
+					},
+				},
+			},
+		}
+	}
 	return &v1.PersistentVolume{
 		ObjectMeta: metav1.ObjectMeta{
 			Name: name,
@@ -233,23 +308,7 @@ func (p *LocalPathProvisioner) Provision(opts pvController.ProvisionOptions) (*v
 					Type: &hostPathType,
 				},
 			},
-			NodeAffinity: &v1.VolumeNodeAffinity{
-				Required: &v1.NodeSelector{
-					NodeSelectorTerms: []v1.NodeSelectorTerm{
-						{
-							MatchExpressions: []v1.NodeSelectorRequirement{
-								{
-									Key:      KeyNode,
-									Operator: v1.NodeSelectorOpIn,
-									Values: []string{
-										node.Name,
-									},
-								},
-							},
-						},
-					},
-				},
-			},
+			NodeAffinity: nodeAffinity,
 		},
 	}, nil
 }
@@ -263,7 +322,11 @@ func (p *LocalPathProvisioner) Delete(pv *v1.PersistentVolume) (err error) {
 		return err
 	}
 	if pv.Spec.PersistentVolumeReclaimPolicy != v1.PersistentVolumeReclaimRetain {
-		logrus.Infof("Deleting volume %v at %v:%v", pv.Name, node, path)
+		if node == "" {
+			logrus.Infof("Deleting volume %v at %v", pv.Name, path)
+		} else {
+			logrus.Infof("Deleting volume %v at %v:%v", pv.Name, node, path)
+		}
 		storage := pv.Spec.Capacity[v1.ResourceName(v1.ResourceStorage)]
 		volMode := string(*pv.Spec.VolumeMode)
 		cleanupCmdsForPath := []string{"/bin/sh", "/script/teardown"}
@@ -288,6 +351,18 @@ func (p *LocalPathProvisioner) getPathAndNodeForPV(pv *v1.PersistentVolume) (pat
 	}
 	path = hostPath.Path
 
+	sharedFS, err := p.isSharedFilesystem()
+	if err != nil {
+		return "", "", err
+	}
+
+	if sharedFS {
+		// We don't have affinity and can use any node
+		return path, "", nil
+	}
+
+	// Dealing with local filesystem
+
 	nodeAffinity := pv.Spec.NodeAffinity
 	if nodeAffinity == nil {
 		return "", "", fmt.Errorf("no NodeAffinity set")
@@ -322,7 +397,11 @@ func (p *LocalPathProvisioner) createHelperPod(action ActionType, cmdsForPath []
 	defer func() {
 		err = errors.Wrapf(err, "failed to %v volume %v", action, name)
 	}()
-	if name == "" || path == "" || node == "" {
+	sharedFS, err := p.isSharedFilesystem()
+	if err != nil {
+		return err
+	}
+	if name == "" || path == "" || (!sharedFS && node == "") {
 		return fmt.Errorf("invalid empty name or path or node")
 	}
 	path, err = filepath.Abs(path)
@@ -395,7 +474,9 @@ func (p *LocalPathProvisioner) createHelperPod(action ActionType, cmdsForPath []
 		helperPod.Name = helperPod.Name[:HelperPodNameMaxLength]
 	}
 	helperPod.Namespace = p.namespace
-	helperPod.Spec.NodeName = node
+	if node != "" {
+		helperPod.Spec.NodeName = node
+	}
 	helperPod.Spec.ServiceAccountName = p.serviceAccountName
 	helperPod.Spec.RestartPolicy = v1.RestartPolicyNever
 	helperPod.Spec.Tolerations = append(helperPod.Spec.Tolerations, lpvTolerations...)
@@ -435,7 +516,11 @@ func (p *LocalPathProvisioner) createHelperPod(action ActionType, cmdsForPath []
 		return fmt.Errorf("create process timeout after %v seconds", CmdTimeoutCounts)
 	}
 
-	logrus.Infof("Volume %v has been %vd on %v:%v", name, action, node, path)
+	if node == "" {
+		logrus.Infof("Volume %v has been %vd on %v", name, action, path)
+	} else {
+		logrus.Infof("Volume %v has been %vd on %v:%v", name, action, node, path)
+	}
 	return nil
 }
 
@@ -478,6 +563,7 @@ func canonicalizeConfig(data *ConfigData) (cfg *Config, err error) {
 		err = errors.Wrapf(err, "config canonicalization failed")
 	}()
 	cfg = &Config{}
+	cfg.SharedFileSystemPath = data.SharedFileSystemPath
 	cfg.NodePathMap = map[string]*NodePathMap{}
 	for _, n := range data.NodePathMap {
 		if cfg.NodePathMap[n.Node] != nil {

From 5888a9b37360b5d8eb4caa2c0b051ea2a13cb4f7 Mon Sep 17 00:00:00 2001
From: Dmitry Chirikov <dmitry@chirikov.nl>
Date: Mon, 1 Mar 2021 15:25:40 +0100
Subject: [PATCH 2/2] Documentation for using shared filesystem tunable

---
 README.md                | 7 +++++++
 deploy/chart/values.yaml | 8 ++++++++
 2 files changed, 15 insertions(+)

diff --git a/README.md b/README.md
index c6bb21f..804ae70 100644
--- a/README.md
+++ b/README.md
@@ -201,6 +201,13 @@ data:
     1. If one node is listed but with `paths` set to `[]`, the provisioner will refuse to provision on this node.
     2. If more than one path was specified, the path would be chosen randomly when provisioning.
 
+`sharedFileSystemPath` allows the provisioner to use a filesystem that is mounted on all nodes at the same time.
+In this case all access modes are supported: `ReadWriteOnce`, `ReadOnlyMany` and `ReadWriteMany` for storage claims.
+
+In addition `volumeBindingMode: Immediate` can be used in  StorageClass definition.
+
+Please note that `nodePathMap` and `sharedFileSystemPath` are mutually exclusive. If `sharedFileSystemPath` is used, then `nodePathMap` must be set to `[]`.
+
 ##### Rules
 The configuration must obey following rules:
 1. `config.json` must be a valid json file.
diff --git a/deploy/chart/values.yaml b/deploy/chart/values.yaml
index 5d3a8f1..153fb0d 100644
--- a/deploy/chart/values.yaml
+++ b/deploy/chart/values.yaml
@@ -58,6 +58,14 @@ nodePathMap:
     paths:
       - /opt/local-path-provisioner
 
+# `sharedFileSystemPath` allows the provisioner to use a filesystem that is mounted on all
+# nodes at the same time. In this case all access modes are supported: `ReadWriteOnce`,
+# `ReadOnlyMany` and `ReadWriteMany` for storage claims. In addition
+# `volumeBindingMode: Immediate` can be used in  StorageClass definition.
+# Please note that `nodePathMap` and `sharedFileSystemPath` are mutually exclusive.
+# If `sharedFileSystemPath` is used, then `nodePathMap` must be set to `[]`.
+# sharedFileSystemPath: ""
+
 resources: {}
   # We usually recommend not to specify default resources and to leave this as a conscious
   # choice for the user. This also increases chances charts run on environments with little